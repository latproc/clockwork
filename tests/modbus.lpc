# various modbus interface tests
#
# if using device connector to update values in B, 
# run it as follows:
#
# device_connector --serial_port /dev/tty.usbserial-A900ced4 
#   --serial_settings 115200  
#   --name dev --queue queue 
#   --pattern '[0-9]+[^0-9]+'

OUT_1 FLAG(tab:Outputs);
OUT_2 FLAG(tab:Outputs);

A CONSTANT(tab:Tests, export:reg) 123;
AA CONSTANT(tab:Tests, export:reg) 3531;
B VARIABLE(tab:Tests, PERSISTENT:true, export:rw_reg) 456;
C CONSTANT(tab:Tests, export:reg32) 554343;
D VARIABLE(tab:Tests, PERSISTENT:true, export:rw_reg32) 10;
E CONSTANT(tab:Tests, export:str, strlen:30) "This is a message";
F VARIABLE(tab:Tests, PERSISTENT:true, export:rw_str, strlen:25) "Another test message";
G VARIABLE(tab:Tests, PERSISTENT:true, export:float32) 1;

PanelScreen VARIABLE(tab:Tests, PERSISTENT:true, export:rw_reg) 1;
RequestScreen VARIABLE(tab:Tests, PERSISTENT:true, export:rw_reg) 1;

Calc MACHINE {
	OPTION Pi 3.14192654;
	EXPORT READONLY FLOAT32 Pi;
    GLOBAL D;
    go DEFAULT;
    ENTER go { offdelay := D * 60000; }
    ENTER INIT { offdelay := D * 60000; }
    OPTION tab Tests;
}
calc Calc;

#device connector interface
DeviceInterface MACHINE output {
	queue LIST;
	busy WHEN queue IS NOT empty;
	idle DEFAULT;

	ENTER busy { 
		tmp := TAKE FIRST FROM queue; 
		x := COPY ALL `[0-9]` FROM tmp;
		output.VALUE := 0 + x;
		SET SELF TO idle;
	}
}
dev DeviceInterface B;
bmon OutputMonitor B;

OutputMonitor MACHINE output {
    EXPORT RW 16BIT Value;
	EXPORT STATES low,med,high;
	OPTION Value 0;
	OPTION tab Tests;
	high WHEN output >= 750;
	med WHEN output >= 500;
	low DEFAULT;

	ENTER high { Value := 750; }
	ENTER med { Value := 500; }
	ENTER low { Value := 250; }
}

OddNumber MACHINE {
	LOCAL OPTION last 0;
	OPTION VALUE 0;

	evaluating WHEN last != VALUE;
	ENTER evaluating { LOG VALUE; last := VALUE; }
	on WHEN VALUE % 2 == 1;
	off DEFAULT;
}
val1 OddNumber(export:rw_reg);
val2 OddNumber(export:rw_reg);

PanelMonitor MACHINE {
	LOCAL OPTION last 0, last_active 0;
	GLOBAL CHANNELS;
	panels LIST;
	LOCAL OPTION className "";

	# check if the panel is ok whenever the number of active channels changes or the panel is not one of the active channels
	update WHEN SELF IS idle && TIMER > 500 || last_active != COUNT ACTIVE FROM CHANNELS;
	ok WHEN COUNT ACTIVE FROM panels == 1;
	idle DEFAULT;	

	COMMAND check { 
		last := SIZE OF CHANNELS;  # last should be the same as the number of channels in the iosh CHANNELS command
		last_active := COUNT ACTIVE FROM CHANNELS; # check last_active against the channels from iosh
		CLEAR panels; # prepare to make a list of panel channels
		COPY ALL FROM CHANNELS TO panels WHERE CLASS OF CHANNELS.ITEM == "PANEL_CHANNEL";
	}
	ENTER update { CALL check ON SELF; }

	ENTER INIT { className := CLASS OF SELF; }
}
panel_monitor PanelMonitor;

Monitor MACHINE other {

sample_flag FLAG (export:ro, tab:Tests);
sample_flag2 FLAG (export:rw, tab:Tests);

	on WHEN other.started_flag IS on;
	off DEFAULT;

}
monitor Monitor(tab:Outputs) flash1;
sample_flag3 FLAG (export:ro, tab:Tests);
sample_flag4 FLAG (export:rw, tab:Tests);

count FLAG (export:rw, tab:Tests); # counter should count while this is on
Counter MACHINE run_flag {
	OPTION i 0;
	OPTION direction 1;
	stop WHEN direction > 0 AND i > 25000 OR direction < 0 AND i <= 0;
	reversing WHEN run_flag IS on AND i>0 AND direction<0;
	counting WHEN run_flag IS on;
	check STATE;
	idle DEFAULT;
	ENTER stop { direction := direction * - 1  }
	ENTER reversing { i := i - 1; SET SELF TO check; }
	ENTER counting { i := i+1;   SET SELF TO check; }
	ENTER check { B := i }
}
counter Counter count;

Error MACHINE {
	EXPORT READONLY STRING 40 cause;
	EXPORT READONLY STRING 40 name;
	EXPORT READWRITE STRING 40 tune;
	error FLAG(export:ro,tab:Tests);
	OPTION cause "No Error";
	OPTION name "Error";
	OPTION tune "No tune";
	ENTER INIT { SET error TO on }
}
M_Error Error;

RESPONSE VARIABLE(PERSISTENT:true, export:rw) "";

Flash MACHINE (delay:500)output {

	EXPORT STATES on,off,error,ready;
	EXPORT COMMANDS start, stop, toggle;
	EXPORT READWRITE 32BIT delay;
	OPTION export rw;
	OPTION delay 500;
    
    OPTION a 20;
    OPTION b 30;
    EXPORT RW 16BIT a,b;

    started_flag FLAG(tab:Outputs, export:rw);
    error_flag FLAG(tab:Outputs, export:ro);

#    timed_out WHEN started_flag IS on && TIMER >= 1000;
    on WHEN started_flag != off && output IS on;
    off WHEN started_flag != off && output IS off;
    error WHEN error_flag IS on;

    ready DEFAULT;

    starting DURING start { SET started_flag TO on; }
    stopping DURING stop { SET started_flag TO off; }

    TRANSITION ready TO on USING start;
    TRANSITION on,off TO ready USING stop;

	COMMAND toggle { 
		IF (started_flag IS on) { SEND stop TO SELF; } 
		ELSE { SEND start TO SELF; }
	}
	TRANSITION on,off TO ready USING toggle;
	TRANSITION ready TO on USING toggle;

    RECEIVE on_enter FROM SELF { 
		LOG "on"; 
		WAIT delay; 
		SET output TO off ;
	}
    RECEIVE off_enter FROM SELF { LOG "off"; WAIT delay; t := started_flag.TIMER; SET output TO on; }

	ENTER INIT {
		started_flag.tab := tab;
		error_flag.tab := tab;
	}
}

MultiStateSwitch MACHINE {
	EXPORT STATES One, Two, Three, Four RW;
	One INITIAL;
	Two STATE;
	Three STATE;
	Four STATE;
}
Switch MultiStateSwitch;


#flash1 Flash (type:Light, tab:Outputs) O_GrabNo1JawOpen;
flash1 Flash (type:Light, tab:Outputs) OUT_1;
#flash2 Flash (type:Light, tab:Outputs) OUT_2;
#flash3 Flash (type:Light, tab:Outputs) OUT_3;
#flash4 Flash (type:Light, tab:Outputs) OUT_4;
#flash5 Flash (type:Light, tab:Outputs) OUT_5;
#flash6 Flash (type:Light, tab:Outputs) OUT_6;

