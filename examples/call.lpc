# A basic one-shot timer with reset
# 
# use start to start the timer and the timer will start running.
# after running for timeout ms it becomes expired

TIMER MACHINE {
	OPTION timeout 100;
	expired WHEN SELF IS expired || (SELF IS running && TIMER >= timeout);
	running STATE;
	stopped INITIAL;

	TRANSITION expired,stopped TO running ON start;
	TRANSITION running,expired,stopped TO stopped ON reset;
}

# A cyclic set machine that goes from one state to the next everytime 
# next command is received

Stepper MACHINE {
  OPTION tab Tests;

  step DURING next { }
  
  TRANSITION a TO b USING next;
  TRANSITION b TO c USING next;
  TRANSITION c TO a USING next;
  
  a INITIAL;
  b STATE;
  c STATE;
}

# a machine that pretends to perform a calculation that takes 
# a second to complete. Use the calc command to start 
# once the calculation is complet the machine will automatically
# reset itself ready for another command.
# calls to calc while the machine is already running will be ignored

Calc MACHINE {
	OPTION wait_time 1000;
	b STATE;
	a DEFAULT;

	running DURING calc {
		LOG "performing a calculation";
		WAIT wait_time;
		LOG "calculation done";
	}

	returning DURING reset { }
	TRANSITION a TO b USING calc;
}

# this transition test should permit a CALL next without
# hanging. The question is whether the transition should
# occur. 
TranstionTest MACHINE {
  OPTION tab Tests;

  TRANSITION a TO b USING next;
  TRANSITION b TO c USING next;
  TRANSITION c TO a USING next;
  
  a INITIAL;
  b STATE;
  c STATE;
}
transtest TranstionTest(tab:Tests);

# this `Disrupter' attempts to disrupt an operation by disabling the driver machine
# once it sees the calculator running

Disrupter MACHINE calculator, driver {

	active WHEN calculator IS running AND driver IS working;
	idle DEFAULT;

	ENTER active { DISABLE driver; LOG "Disabled " + driver.NAME }
}

# a test machine that uses CALL to wait for a long operation

Test MACHINE calculator {
  
    stepper Stepper;

	done WHEN calculator IS b; # not guaranteed to be noticed
	ready DEFAULT;
    
    ENTER done {
		LOG "Calling 'next' on stepper";
        CALL next ON stepper ON ERROR bad_call ON TIMEOUT call_timeout;
		LOG "Call complete";
    }

	CATCH bad_call {
		LOG "bad call"
	}

	CATCH call_timeout {
		LOG "call timeout"
	}
    
    COMMAND StepTransition { CALL next ON transtest }

	working DURING go {  
		LOG "about to calculate";
		CALL calc ON calculator ON ERROR bad_call ON TIMEOUT call_timeout; 
		LOG "calculation done";
		#SEND calc TO calculator;
		#LOG "sent calculate command";
		#WAIT 50;
		#WAITFOR calc IS a;
	}
	TRANSITION ready TO done USING go;
}


calc Calc(tab:tests);
test Test(tab:Tests) calc;
disrupter Disrupter(tab:tests) calc, test;

