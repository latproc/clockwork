MODULES {
    Beckhoff_EK1100 (position:0) ;
    Beckhoff_EK1814 (position:3) ;#6000 7000;  # 4 IN, 4 OUT 
    Beckhoff_EL1008 (position:1) ;#6000;  # 8 IN
    Beckhoff_EL2008 (position:2) ;#7000;  # 8 OUT 
}

Total_Counts VARIABLE (tab:Globals) 0;
One_Thousand CONSTANT (tab:Globals) 1000;

#OUT_1    POINT (type:Output, tab:Outputs, image:output64x64) Beckhoff_EL2008, 1;
#OUT_2    POINT (type:Output, tab:Outputs, image:output64x64) Beckhoff_EL2008, 2;

#OUT_1    POINT (type:Output, tab:Outputs, image:output64x64) Beckhoff_EK1814, 1;
#OUT_2    POINT (type:Output, tab:Outputs, image:output64x64) Beckhoff_EK1814, 2; # buzzer
OUT_1 FLAG(tab:Outputs);
OUT_2 FLAG(tab:Outputs);


Cond MACHINE enabled, guard {
  true WHEN enabled IS on AND guard IS on;
  false DEFAULT;
}

Enabler MACHINE fsm {
    idle INITIAL;
    enabling DURING enable {
        ENABLE fsm
    }
    disabling DURING disable {
        DISABLE fsm;
    }
    TRANSITION idle TO idle USING enable;
    TRANSITION idle TO idle USING disable;
}

enable_counter Enabler (tab:Outputs) counter;

#
# This counter monitors the input provided and increments a counter
# each time the input comes on by way of a test, we use a condition
# to check whether the machine should be enabled

Counter MACHINE (target:10, timeout:4000) input, buzzer {

    GLOBAL Total_Counts,One_Thousand;

#    c_enabled CONDITION enabled, counter { enabled IS on AND counter < target; }
    c_enabled Cond (tab:Outputs) enabled, OUT_1;
    enabled FLAG (tab:Outputs); 
    error_flag FLAG (tab:Outputs); 

	init INITIAL;
    ready WHEN enabled IS off;
    error WHEN (SELF IS error) || (SELF IS unknown && TIMER> timeout) || input IS turning_off || input IS turning_on;
    add_one WHEN c_enabled IS true AND counter < target AND input IS on;
    waiting WHEN c_enabled IS true AND counter < target AND input IS off;
    done WHEN counter >= target;
#	wait_hardware WHEN enabled IS on;
#    test_ok WHEN c_enabled IS true AND counter < target;
#    test_counter WHEN counter < target;
#    test_enabled WHEN c_enabled IS true;
	unknown DEFAULT;

    starting DURING start {
	LOG "starting";
	SET enabled TO on;
    }

	ENTER unknown {
		IF ( c_enabled IS true) { LOG "c_enabled is true"; };
		IF ( 
		counter < target
		) 
		{ LOG "counter < target"; 
		};
		IF ( input IS on) { LOG "input IS on"; }
	}

    stopping DURING stop {
        LOG "stopping";
        SET enabled TO off;
		SET error_flag TO off; 
		SET buzzer TO off;
    }

	ENTER error { 
		SET buzzer TO on;
		SET error_flag TO on; 
	}

	resetting DURING reset { }
	
    ENTER init { SET enabled TO off; }
    ENTER add_one { 
		LOG "pulse"; 
		INC counter; 
		Total_Counts := Total_Counts + 1 ;
		One_Thousand := 2; # this should have no effect
	}
    ENTER ready { counter BECOMES 0; }

    TRANSITION ready TO waiting USING start;
    TRANSITION error,add_one,waiting,done TO ready USING stop;
}

Flash MACHINE (delay:500) output {

	GLOBAL Total_Counts;
    started_flag FLAG (type:FLAG, tab:Outputs);

#    timed_out WHEN started_flag IS on && TIMER >= 1000;
    on WHEN started_flag NOT == off && output IS on;
    off WHEN started_flag NOT == off && output IS off;

    ready DEFAULT;

    starting DURING start { SET started_flag TO on; }
    stopping DURING stop { SET started_flag TO off; }

    TRANSITION ready TO on USING start;
    TRANSITION on,off TO ready USING stop;

    RECEIVE on_enter { LOG "on"; WAIT delay; SET output TO off; }
    RECEIVE off_enter { LOG "off"; WAIT delay; SET output TO on; }
}

counter Counter (tab:Outputs, target:4) flash1, OUT_2;

#flash1 Flash (type:Light, tab:Outputs) O_GrabNo1JawOpen;
flash1 Flash (type:Light, tab:Outputs,delay:1000) OUT_1;
#flash2 Flash (type:Light, tab:Outputs) OUT_2;
#flash3 Flash (type:Light, tab:Outputs) OUT_3;
#flash4 Flash (type:Light, tab:Outputs) OUT_4;
#flash5 Flash (type:Light, tab:Outputs) OUT_5;
#flash6 Flash (type:Light, tab:Outputs) OUT_6;

