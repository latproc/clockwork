# this machine sets state based on a local value and global flag
GlobalTest MACHINE {
	GLOBAL flag;
	OPTION x 3;

	on WHEN x >4 AND flag IS on;
	off WHEN x <2 AND flag IS on;
	unknown DEFAULT;
}
gt GlobalTest;
flag FLAG;

# this test machine takes three other flag machines and sets its 
# state based on the number of flags set

# we also test the use of VARIABLEs

m VARIABLE (tab:Tests) 7;
n VARIABLE (tab:Tests) 8;

Test MACHINE a, b, c{
	GLOBAL m,n;
    o VARIABLE (tab:Tests) 9;
    
	three WHEN a == on && m == 7 && b == on && c == on && o IS 3;
	two WHEN a == on && b == on && n == 3 && c == off 
	        || a == off && b == on && c == on || a == on && b == off && c == on;
	one WHEN a == on && b == off && c == off 
	        || a == off && b == on && c == off || a == off && b == off && c == on;

	# other samples (these can't match because the above cover all cases)
	aOrBc WHEN a IS on || b IS on && c IS off;
	first_two WHEN (a IS on || b IS on) && c IS off;
	none DEFAULT;

    ENTER INIT {
     m := 1 + 2*3;
     n := 15 / 4;
     o := 15 % 4;
    } 
}

On MACHINE { 
	on DEFAULT;
}

Off MACHINE {
	off DEFAULT;
}
# should the following instantiations issue a warning? 
on On;
off Off;


testABC Test (tab:Tests,expect:three) on, on, on;
testAbC Test (tab:Tests,expect:two) on, off, on;
testaBC Test (tab:Tests,expect:two) off, on, on;
testABc Test (tab:Tests,expect:two) on, on, off;
testabC Test (tab:Tests,expect:one) off, off, on;
testaBc Test (tab:Tests,expect:one) off, on, off;
testAbc Test (tab:Tests,expect:one) on, off, off;
testabc Test (tab:Tests,expect:none) off, off, off;
