#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extbook
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Latproc User Guide
\end_layout

\begin_layout Author
Martin Leadbeater
\end_layout

\begin_layout Date
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Overview
\end_layout

\begin_layout Section
Preface
\end_layout

\begin_layout Standard
Latproc is a language and tools for process control, the language is called
 'Clockwork' and there are several tools in the Latproc family, most of
 these are centred around the language and in monitoring and controlling
 the operation of systems built with it.
 This guide aims to help you get started with using our tools and gives
 an introductory tutorial on the language.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This guide describes the tools that come with the Latproc project (https://githu
b.com/latproc); the tools include:
\end_layout

\begin_layout Description
cw a daemon that runs clockwork programs with no EtherCAT capability
\end_layout

\begin_layout Description
device_connector a program to interface between iod and external programs
\end_layout

\begin_layout Description
humid a user interface editor and human-machine interface program
\end_layout

\begin_layout Description
iod a daemon that talks to EtherCAT™ to interact with io hardware using
 the clockwork language
\end_layout

\begin_layout Description
iosh a shell to interact with iod
\end_layout

\begin_layout Description
modbusd an interface between iod and modbus
\end_layout

\begin_layout Description
persistd a basic persistence daemon to record state changes from iod 
\end_layout

\begin_layout Description
zmq_monitor a program to monitor zmq messages published by iod 
\end_layout

\begin_layout Description
mbmon a modbus master bridge to enable clockwork to control modbus devices
\end_layout

\begin_layout Standard
For the remainder of this guide, the above programs are split between those
 that run clockwork (`Language') and those that provide interfaces (`Tools').
\end_layout

\begin_layout Subsection
Acknowledgements
\end_layout

\begin_layout Standard
The language and tools making up Latproc are built using a variety of open
 source tools and platforms, including;
\end_layout

\begin_layout Itemize
anet tcp wrappers (part of redis - http://redis.io)
\end_layout

\begin_layout Itemize
boost (http://boost.org/) - various c++ bits and pieces
\end_layout

\begin_layout Itemize
IgH EtherCAT(tm) Master for Linux (http://www.etherlab.org/en/ethercat/index.php)
\end_layout

\begin_layout Itemize
libmodbus (http://libmodbus.org/) - for communication with modbus/tcp terminals
\end_layout

\begin_layout Itemize
zeromq (http://www.zeromq.org/) - for inter-program messaging
\end_layout

\begin_layout Itemize
mqtt (http://mqtt.org)
\end_layout

\begin_layout Itemize
cJSON
\end_layout

\begin_layout Standard
We developed the software using open source development tools: GNU gcc,
 bison and flex and used Linux and MacOSX workstations.
\end_layout

\begin_layout Chapter
Getting started
\end_layout

\begin_layout Standard
Install clockwork 
\end_layout

\begin_layout LyX-Code
git clone http://github.com/latproc/clockwork 
\end_layout

\begin_layout LyX-Code
git checkout production
\end_layout

\begin_layout LyX-Code
cd clockwork/iod
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
The above will create hopefully compile various tools and leave them in
 the current directory.
 ...
 (TODO)
\end_layout

\begin_layout Standard
Run clockwork:
\end_layout

\begin_layout LyX-Code
nano hello.cw
\end_layout

\begin_layout Standard
enter the following:
\end_layout

\begin_layout LyX-Code
Hello MACHINE { ENTER INIT { LOG "Hello World"; SHUTDOWN } }
\end_layout

\begin_layout LyX-Code
hello Hello; 
\end_layout

\begin_layout Standard
save the file and execute the 'cw' interpreter:
\end_layout

\begin_layout LyX-Code
cw hello.cw
\end_layout

\begin_layout Standard
The program will display a hello message: 
\end_layout

\begin_layout LyX-Code
2013-09-03 15:39:36.689 ------- hello: Hello World -------
\end_layout

\begin_layout Standard
The hello program is a bit unusual for clockwork because normally clockwork
 will keep running, monitoring and controlling things as instructed.
\end_layout

\begin_layout Subsection
Communicating with Clockwork servers
\end_layout

\begin_layout Standard
When a Clockwork program is being run, you can interact with it using a
 command interface or via a web page.
 The simplest method to get started with is the command interface; the web
 interface needs some extra configuration for the web server.
 Refer to section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:iosh"

\end_inset

 for further information about iosh.
\end_layout

\begin_layout Standard
The latproc source includes some PHP code that provides a simple web view
 of the state machines in the executing program.
 The program requires PHP version 5.3 or later and has been tested with apache
 and with minihttpd.
 [further explanation of the setup to be done].
\end_layout

\begin_layout Subsection
Repositories and projects
\end_layout

\begin_layout Standard
The main latproc repository is at https://github.com/latproc/clockwork.git.
 Some tools within latproc are in their own repositories, notably the event
 sampler, filter and terminal-scope (https://github.com/latproc/scope) and
 the user interface driver, humid (https://github.com/latproc/humid).
\end_layout

\begin_layout Section
Using the interactive shell
\end_layout

\begin_layout Standard
Clockwork programs run continuously and it is possible to interact with
 them using a number of techniques: 
\end_layout

\begin_layout Itemize
the interactive shell (iosh)
\end_layout

\begin_layout Itemize
the web user interface (to be covered later in this document)
\end_layout

\begin_layout Itemize
using ∅MQ (zeromq)
\end_layout

\begin_layout Itemize
using modbus
\end_layout

\begin_layout Standard
The simplest of these to start with is iosh.
\end_layout

\begin_layout Standard
Starting iosh
\end_layout

\begin_layout Standard
execute the steps in section , above to build 'cw' and 'iosh' 
\end_layout

\begin_layout Standard
run iod/iosh (if you are still in the clockwork/iod directory, simply type
 
\end_layout

\begin_layout LyX-Code
./iosh 
\end_layout

\begin_layout Standard
You should see a prompt like the following:
\end_layout

\begin_layout LyX-Code
Connecting to tcp://127.0.0.1:5555 
\end_layout

\begin_layout LyX-Code
Enter HELP; for help.
 Note that ';' is required at the end of each command use exit; or ctrl-D
 to exit this program 
\end_layout

\begin_layout Standard
Enter HELP; to display a list of available commands and in another terminal,
 run clockwork against one of the test files in the clockwork/tests directory:
\end_layout

\begin_layout LyX-Code
./cw ../tests/blink.cw
\end_layout

\begin_layout Standard
Back in iosh, enter LIST; to display a list of machines that the clockwork
 program is running;
\end_layout

\begin_layout Standard
> LIST; type this 
\end_layout

\begin_layout Standard
blinker Blinker clockwork responds with this
\end_layout

\begin_layout Standard
4.
 Look at the source for the blink program: 
\end_layout

\begin_layout LyX-Code
1 Blinker MACHINE { 
\end_layout

\begin_layout LyX-Code
2 on STATE; 
\end_layout

\begin_layout LyX-Code
3 off STATE; 
\end_layout

\begin_layout LyX-Code
4 ENTER on { WAIT 1000; SET SELF TO off; } 
\end_layout

\begin_layout LyX-Code
5 ENTER off { WAIT 1000; SET SELF TO on; } 
\end_layout

\begin_layout LyX-Code
6 } 
\end_layout

\begin_layout LyX-Code
7 blinker Blinker; 
\end_layout

\begin_layout Standard
Note that the machine has two states, 'on' and 'off' the two ENTER functions
 cause the machine to flip between on and off after a delay of 1000ms.
 
\end_layout

\begin_layout Standard
You can also describe the internals of the blinker machine:
\end_layout

\begin_layout LyX-Code
1	> DESCRIBE blinker; 
\end_layout

\begin_layout LyX-Code
2	> --------------- 
\end_layout

\begin_layout LyX-Code
3	blinker: INIT 
\end_layout

\begin_layout LyX-Code
4	  Class: Blinker instantiated at: blink.cw line:10 
\end_layout

\begin_layout LyX-Code
5	properties: 
\end_layout

\begin_layout LyX-Code
6	  NAME:blinker,STATE:INIT 
\end_layout

\begin_layout LyX-Code
7	
\end_layout

\begin_layout LyX-Code
8	Timer: 24503 
\end_layout

\begin_layout Standard
From this description you can see that the machine called 'blinker' is in
 a state 'INIT' (line 3), also, blinker has been in the INIT state for 24.503
 seconds.
 When clockwork starts running, all machines enter a state called INIT.
 Normally they quickly change state automatically but since the 'blinker'
 has nothing that causes a state change to 'on' or 'off', it will stay in
 INIT forever.
 
\end_layout

\begin_layout Standard
Manually set the blinker into the 'on' state using the SET command in iosh:
 
\end_layout

\begin_layout LyX-Code
> SET blinker TO on; 
\end_layout

\begin_layout Standard
You can also get the state of the blinker using the GET command: 
\end_layout

\begin_layout LyX-Code
> GET blinker; 
\end_layout

\begin_layout LyX-Code
> on 
\end_layout

\begin_layout LyX-Code
> GET blinker; 
\end_layout

\begin_layout LyX-Code
> off
\end_layout

\begin_layout Standard
Note: 
\end_layout

\begin_layout Standard
If the iosh command prompt '>' does not come back, iosh is trying to connect
 to an instance of clockwork but can't; check that you still have cw running
 on the local host.
 
\end_layout

\begin_layout Subsection
Monitoring clockwork while it is running
\end_layout

\begin_layout Standard
Clockwork uses the MQ messaging library for most of its communication needs,
 for example, iosh communicates with clockwork via ∅MQ.
 Whenever machines change state, clockwork sends a message on a ∅MQ channel
 that other programs can subscribe to.
 The distribution includes a sample program that monitors this channel and
 displays state change information on the terminal.
 This example runs from the top-level of the clockwork distribution.
 
\end_layout

\begin_layout Standard
1.
 execute the steps in above to step build 'cw' and 'iosh' 
\end_layout

\begin_layout Standard
2.
 in another terminal, run clockwork against the blink.cw files in the clockwork/t
ests directory:
\end_layout

\begin_layout LyX-Code
iod/cw ../tests/blink.cw 3.
 
\end_layout

\begin_layout Standard
use iosh to start the blinker working:
\end_layout

\begin_layout LyX-Code
echo 'SET blinker TO on;' | iod/iosh
\end_layout

\begin_layout Standard
Run the message monitoring program: TODO - fix this to use sampler...
\end_layout

\begin_layout LyX-Code
$ iod/zmq_ecat_monitor 
\end_layout

\begin_layout LyX-Code
Listening on port 5556 
\end_layout

\begin_layout LyX-Code
blinker  STATE on 
\end_layout

\begin_layout LyX-Code
blinker  STATE off 
\end_layout

\begin_layout LyX-Code
blinker  STATE on 
\end_layout

\begin_layout LyX-Code
blinker  STATE off
\end_layout

\begin_layout Standard
The monitor can be very useful (and very verbose) when testing clockwork
 programs but we have also recently started a new project at http://github.com/la
tproc/scope that aims to make much more sophisticated monitoring tools.
 
\end_layout

\begin_layout Subsection
Interacting with clockwork using a web client 
\end_layout

\begin_layout Standard
The clockwork distribution includes a copy of mini_httpd (http://acme.com/softwar
e/mini_httpd/) that we have configured to provide a server for web-based
 interaction.
 There are a few other things to do to setup the server however and you
 may be more comfortable using another system.
 The critical components are: php 5.3 and the zmq library for php (http://zeromq.o
rg/bindings:php).
 [TBD more information required]
\end_layout

\begin_layout Standard
The web site organizes groups of clockwork machines into tabs and also provides
 some other tabs relating the Beckhoff EtherCAT(tm) system if it is being
 used.
 To keep the web page in sync with clockwork, the client periodically issues
 a request for a list of all machines, their states and properties.
 
\end_layout

\begin_layout Standard
For example, here is the LIST JSON output for our blink.cw program 
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
	"name":	"blinker",
\end_layout

\begin_layout LyX-Code
	"class":	"Blinker",
\end_layout

\begin_layout LyX-Code
	"NAME":	"blinker",
\end_layout

\begin_layout LyX-Code
	"STATE":	"INIT",
\end_layout

\begin_layout LyX-Code
	"delay":	10,
\end_layout

\begin_layout LyX-Code
	"enabled":	true,
\end_layout

\begin_layout LyX-Code
	"state":	"INIT",
\end_layout

\begin_layout LyX-Code
	"commands":	"turnOff,turnOn",
\end_layout

\begin_layout LyX-Code
	"display":	"delay"
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Section
Tools
\end_layout

\begin_layout Subsection
iosh
\begin_inset CommandInset label
LatexCommand label
name "subsec:iosh"

\end_inset


\end_layout

\begin_layout Standard
Clockwork and iod both provide support for a simple shell, called iosh via
 the Ømq (ZeroMQ) network library.
 To connect to the clockwork server, simply run iosh:
\end_layout

\begin_layout LyX-Code
$ iosh
\end_layout

\begin_layout LyX-Code
Connecting to tcp://127.0.0.1:5555
\end_layout

\begin_layout LyX-Code
Enter HELP; for help.
 Note that ';' is required at the end of each command   use exit; or ctrl-D
 to exit this program 
\end_layout

\begin_layout LyX-Code
> 
\end_layout

\begin_layout Standard
at the prompt, enter any supported command, as follows:
\end_layout

\begin_layout Description
DEBUG
\begin_inset space ~
\end_inset

machine
\begin_inset space ~
\end_inset

on|off start/stops debug messages for the device; see Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Debug-groups"

\end_inset

.
 Example: DEBUG blinker on
\end_layout

\begin_layout Description
DEBUG
\begin_inset space ~
\end_inset

debug_group
\begin_inset space ~
\end_inset

on|off starts/stops debug messages for all the devices in the given group;
 see Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Debug-groups"

\end_inset

.
 Example DEBUG DEBUG_SCHEDULER on
\end_layout

\begin_layout Description
DISABLE
\begin_inset space ~
\end_inset

machine disables a machine; in the case of a POINT, it is turned off, other
 machines simply sit in the current state and do not process events or monitor
 states
\end_layout

\begin_layout Description
EC
\begin_inset space ~
\end_inset

command send a command to the ethercat tool (iod only)
\end_layout

\begin_layout Description
ENABLE
\begin_inset space ~
\end_inset

machine_name enable a machine; set the machine state to its initial state
 and have it begin processing events and monitoring states
\end_layout

\begin_layout Description
GET
\begin_inset space ~
\end_inset

machine_name display the state of the names machine
\end_layout

\begin_layout Description
LIST show a list of all machines
\end_layout

\begin_layout Description
LIST
\begin_inset space ~
\end_inset

[group_name] show a list of machines and their current state and properties
 in JSON format, optionally limit the list to the named group.
\end_layout

\begin_layout Description
MASTER display the ethercat master state (iod only)
\end_layout

\begin_layout Description
MODBUS
\begin_inset space ~
\end_inset

export write the modbus export configuration to the export file (the file
 name is configured on the commandline when cw or iod is started
\end_layout

\begin_layout Description
MODBUS
\begin_inset space ~
\end_inset

group
\begin_inset space ~
\end_inset

address
\begin_inset space ~
\end_inset

new_value simulate a modbus event to change the given element to the new
 value
\end_layout

\begin_layout Description
PROPERTY
\begin_inset space ~
\end_inset

machine_name
\begin_inset space ~
\end_inset

property_name
\begin_inset space ~
\end_inset

new_value set the value of the given property
\end_layout

\begin_layout Description
QUIT exit the program
\end_layout

\begin_layout Description
RESUME
\begin_inset space ~
\end_inset

machine_name enable a machine by reentering the state it was in when it
 was disabled.
\end_layout

\begin_layout Description
SEND
\begin_inset space ~
\end_inset

command send the event, given in target_machine_name '.' event_name form.
\end_layout

\begin_layout Description
SET
\begin_inset space ~
\end_inset

machine_name
\begin_inset space ~
\end_inset

TO
\begin_inset space ~
\end_inset

state_name attempt to set the named machine to the given state
\end_layout

\begin_layout Description
SLAVES display information about the known EtherCAT slaves
\end_layout

\begin_layout Description
TOGGLE
\begin_inset space ~
\end_inset

machine_name changes from the on state to off or vice-versa, only usable
 on machines with both an on and off state.
\end_layout

\begin_layout Subsubsection
Debug facilities
\end_layout

\begin_layout Standard
Basic debug facilities are provided to:
\end_layout

\begin_layout Itemize
enable extra output from the driver onto its terminal output.
 The debug groups are listed in table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Debug-groups"

\end_inset


\end_layout

\begin_layout Itemize
trace handler execution by turning trace mode on and monitoring a device
 via sampler
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="8cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_ACTIONS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to execution of steps in handlers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_AUTOSTATES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to evaluation of stable states
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_CHANNELS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to communication channels between programs
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_DEPENDANCIES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_DISPATCHER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to sending internal messages from handlers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_ETHERCAT
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows EtherCAT related messages
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_INITIALISATION
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages about the initialisation of internal structures
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_MACHINELOOKUPS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not used
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_MESSAGING
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to sending of zmq messages
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_MODBUS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to modbus
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_PARSER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to the parsing of clockwork scripts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_PREDICATES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to evaluation of predicates in IF statements and
 stable states
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_PROPERTIES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages relating to properties
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_SCHEDULER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows scheduler messages
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEBUG_STATECHANGES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Shows messages aboute state changes and transition tables
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Debug-groups"

\end_inset

Debug groups
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Tracing
\end_layout

\begin_layout Standard
To enable tracing from iosh, first enable tracing globally and set the TRACEABLE
 property on the machine to be traced to TRUE or FALSE to enable/disable
 tracing on that machine.
 For example:
\end_layout

\begin_layout LyX-Code
TRACING ON 
\end_layout

\begin_layout LyX-Code
PROPERTY blinker TRACEABLE TRUE;
\end_layout

\begin_layout Subsection
persistd
\end_layout

\begin_layout Standard
persistd monitors a connection clockwork driver for machines that publicly
 report their state changes using zmq.
\end_layout

\begin_layout Standard
Some machine properties are used within clockwork and are not propagated
 to the persistence daemon, however other properties are used in tools external
 to clockwork and by default these properties are ignored by persistd.
 
\end_layout

\begin_layout Standard
In future a method will be available to nominate the set of keys that are
 to be ignored.
\end_layout

\begin_layout Subsection
beckhoffd
\end_layout

\begin_layout Subsection
modbusd
\end_layout

\begin_layout Subsection
device_connector
\end_layout

\begin_layout Section
Other Features
\end_layout

\begin_layout Subsection
Connecting other devices
\end_layout

\begin_layout Standard
Currently external devices can be connected to cw and iod by use of the
 EXTERNAL machine class.
 To define a connection:
\end_layout

\begin_layout Itemize
instantiate an EXTERNAL machine
\end_layout

\begin_layout Itemize
set parameters on that machine:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
HOST a string with the name or ip address of the host.
 The sepecial host name `*' indicates that the program should use a publisher/su
bscriber messaging model and not expect any replies.
\end_layout

\begin_layout Description
PORT a number with the port to connect to on the remote machine
\end_layout

\end_deeper
\begin_layout Standard
When a message is sent to the machine defined in this way, a connection
 is made via ØMQ and the message is sent.
 The connection is help open, ready for more messages.
\end_layout

\begin_layout Subsection
Persistence
\end_layout

\begin_layout Standard
Machine state and properties are normally initialised on program startup
 but a machine can also be marked as persistent to cause them to be reinitialise
d to their last known state with the same property values.
\end_layout

\end_body
\end_document
