#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Clockwork on FreeRTOS
\end_layout

\begin_layout Standard
This is to describe an experimental port of the clockwork language to FreeRTOS
 running on an ESP32 cpu.
 Although running on a real-time operating system, this implementation does
 not strive to make clockwork itself operate in real-time; variation in
 input/output times of up to a few milliseconds can be expected.
\end_layout

\begin_layout Section
Hardware abstraction
\end_layout

\begin_layout Standard
Initially, only single bit IO are supported.
 The GPIO_INPUT module provides the single bit abstraction layer for inputs
 and GPIO_output does the same for single bit outputs.
 For example, to declare the use of GPIO inputs and outputs, use:
\end_layout

\begin_layout LyX-Code
inputs MODULE GPIO_INPUTS;
\end_layout

\begin_layout LyX-Code
outputs MODULE GPIO_OUTPUTS;
\end_layout

\begin_layout Standard
The abstraction layer looks after the microcontroller initialisation of
 the pin to be an input or output.
 
\end_layout

\begin_layout Standard
Clockwork doesn't currently distinguish between input and output POINTs
 but so to declare an input clockwork 
\end_layout

\begin_layout LyX-Code
btn POINT inputs, 5;
\end_layout

\begin_layout LyX-Code
led POINT outputs, 6;
\end_layout

\begin_layout Standard
The program to pulse a light might be something like:
\end_layout

\begin_layout LyX-Code
pulse Pulser led;
\end_layout

\begin_layout LyX-Code
Pulser MACHINE out {
\end_layout

\begin_layout LyX-Code
  on WHEN SELF IS off AND TIMER >= 1000;
\end_layout

\begin_layout LyX-Code
  off DEFAULT;
\end_layout

\begin_layout LyX-Code
  ENTER on { SET led TO on; }
\end_layout

\begin_layout LyX-Code
  ENTER off { SET led TO off; }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsection
Types
\end_layout

\begin_layout Standard
Clockwork builtin types are used for the io interface.
 Currently implemented or under development are
\end_layout

\begin_layout Description
POINT single bit input/output
\end_layout

\begin_layout Section
Compiling the interpreter
\end_layout

\begin_layout Itemize
no rtti to enable dynamic_cast
\end_layout

\begin_layout Itemize
no boost mutexes, need to use rtos mutex
\end_layout

\begin_layout Itemize
need to use the rtos scheduler
\end_layout

\begin_layout Section
The Compiler
\end_layout

\begin_layout Standard
Strategy
\end_layout

\begin_layout Itemize
turn actions into statements/ functions
\end_layout

\begin_layout Itemize
implement a machines as coroutines within the freertos task system
\end_layout

\begin_layout Itemize
machine run() methods block waiting for a signal from the scheduler/process
 manager
\end_layout

\begin_layout Itemize
it is safe to call other machine methods when run() is blocked
\end_layout

\begin_layout Section
Actions
\end_layout

\begin_layout Description
Abort causes a return from method with an error flag set/ Sends a method_abort
 message
\end_layout

\begin_layout Description
CallMethod starts a trigger waiting for a method_done message and sends
 a message.
 
\end_layout

\begin_layout Description
ClearList clears a list
\end_layout

\begin_layout Description
CopyProperties copies the properties from one object to another
\end_layout

\begin_layout Description
Disable disables a machine
\end_layout

\begin_layout Description
Enable enables a machine
\end_layout

\begin_layout Description
ExecuteMessage immediately executes a method on a machine
\end_layout

\begin_layout Description
Expression performs INC, DEC and SET operations on properties
\end_layout

\begin_layout Description
FireTrigger an internal action that fires a trigger
\end_layout

\begin_layout Description
HandleMessage an internal action that finds a message handler and runs it
\end_layout

\begin_layout Description
HandleRequest not used
\end_layout

\begin_layout Description
IfCommand
\end_layout

\begin_layout Description
IfElseCommand
\end_layout

\begin_layout Description
Include
\end_layout

\begin_layout Description
Lock
\end_layout

\begin_layout Description
Log
\end_layout

\begin_layout Description
MachineCommand
\end_layout

\begin_layout Description
CopyPattern copy a value matching a pattern
\end_layout

\begin_layout Description
CopyAllPattern copy all repetitions of a pattern
\end_layout

\begin_layout Description
ExtractPattern 
\end_layout

\begin_layout Description
ExtractAllPattern
\end_layout

\begin_layout Description
ReplacePattern
\end_layout

\begin_layout Description
ReplaceAllPattern
\end_layout

\begin_layout Description
PopBack
\end_layout

\begin_layout Description
PopFront
\end_layout

\begin_layout Description
GetListItem
\end_layout

\begin_layout Description
Predicate
\end_layout

\begin_layout Description
Resume
\end_layout

\begin_layout Description
SendMessage
\end_layout

\begin_layout Description
SetListEntries
\end_layout

\begin_layout Description
SetOperation
\end_layout

\begin_layout Description
SetState
\end_layout

\begin_layout Description
SetIOState
\end_layout

\begin_layout Description
Shutdown
\end_layout

\begin_layout Description
SortList
\end_layout

\begin_layout Description
SyncRemoteStates
\end_layout

\begin_layout Description
Unlock
\end_layout

\begin_layout Description
Wait
\end_layout

\begin_layout Description
WaitFor
\end_layout

\begin_layout Section
File access
\end_layout

\begin_layout Section
Interpreter
\end_layout

\begin_layout Section
Runtime
\end_layout

\begin_layout Standard
The runtime provides a framework for machines, hardware abstraction and
 execution of actions
\end_layout

\begin_layout Subsection
Hardware Abstraction
\end_layout

\begin_layout Standard
In clockwork, hardware facilities are encapsulated by a MODULE and various
 hardware values such as POINTs, ANALOGINPUTs etc.
 These elements in clockwork are compiled to produce fragments that:
\end_layout

\begin_layout Itemize
configure I/O, 
\end_layout

\begin_layout Itemize
map an I/O device to a specific zone within the interpreter's I/O map
\end_layout

\begin_layout Itemize
read the I/O and update the map
\end_layout

\begin_layout Itemize
read the map and update the I/O
\end_layout

\begin_layout Itemize
generate change events within the clockwork environment
\end_layout

\begin_layout Standard
for example, after:
\end_layout

\begin_layout LyX-Code
inputs MODULE GPIO_INPUTS;
\end_layout

\begin_layout LyX-Code
btn POINT inputs, 5;
\end_layout

\begin_layout Standard
the generated code will include the following:
\end_layout

\begin_layout LyX-Code
/* POINT */
\end_layout

\begin_layout LyX-Code
#define state_POINT_on 1
\end_layout

\begin_layout LyX-Code
#define state_POINT_off 2
\end_layout

\begin_layout LyX-Code
struct io_POINT { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
MachineBase machine;
\end_layout

\begin_layout LyX-Code
unsigned int pin;
\end_layout

\end_deeper
\begin_layout LyX-Code
};
\end_layout

\begin_layout LyX-Code
void init_POINT_inputs(struct io_POINT *m, const char *name) {
\end_layout

\begin_deeper
\begin_layout LyX-Code
gpio_pad_select_gpio(pin); 
\end_layout

\begin_layout LyX-Code
gpio_set_direction(BLINK_GPIO, GPIO_MODE_INPUT);
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
void_enter_on_POINT_inputs(struct Pulse *m, ccrContParam);
\end_layout

\begin_layout LyX-Code
void enter_off_POINT_inputs(struct Pulse *m, ccrContParam);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
The hardware interface is communicated to the program via a memory map that
 is configured based on the defined inputs.
 At regular intervals, the hardware monitor reads input state and copies
 the data to the 
\end_layout

\begin_layout Section
Notes
\end_layout

\begin_layout Itemize
iosh interface/req-rep
\end_layout

\begin_layout Itemize
web server task
\end_layout

\begin_layout Itemize
zmq
\end_layout

\begin_layout Itemize
when exporting headers, we need to determine how to define the parameter
 types.
 Since each instance of a machine in clockwork can accept parameters of
 different type we need to be able to generate c code with the same flexibility.
 Initially, we simply define parameters as MachineBase*.
\end_layout

\begin_layout Itemize
modules should be passed to the io-based items so that a fixed order can
 be given in the io map
\end_layout

\begin_layout Itemize
analogue input values should cause dependent machines to activate on value
 change
\end_layout

\begin_layout Itemize
all machines need a list of dependent machines
\end_layout

\begin_layout Itemize
dependent machine activation could be done via a specific function with
 hard-coded values.
 is this a good idea?
\end_layout

\end_body
\end_document
