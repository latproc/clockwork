#if 0
/* crawl to the stop position in either direction */
static long perform_stopping(struct PIDData*data, void *scope, void* statistics_scope) {
    if (data->debug && *data->debug) fprintf(data->logfile, "%s stopping\n", data->conveyor_name);

	long new_power;
	/* check to see if we have entered the tolerance range */
	if ( *data->stop_position - *data->rev_tolerance <= *data->position &&
		*data->position <= *data->stop_position + *data->fwd_tolerance ) {
		if ( labs(data->speed) < 4 ) {
 			if (data->debug && *data->debug) {
				fprintf(data->logfile, "%s calling stop() within tolerance, %ld, %ld - %ld\n",
				 data->conveyor_name, *data->position, *data->stop_position, 
				 (long)(*data->position - *data->stop_position));
			}
			stop(data, scope);
			data->sub_state = is_stopped;
		}
		else {
       		if (data->debug && *data->debug) {
    			fprintf(data->logfile, "%s calling halt() within tolerance\n", data->conveyor_name);
			halt(data, scope);
		}
    	if (data->debug && *data->debug) {}
        	setIntValue(statistics_scope, "Vel", data->speed);
        	setIntValue(statistics_scope, "Pwr", 0);
    	}
		return 0;
	}
	else {
    	/* increase power directly if the machine doesn't seem to be moving */
    	if ( labs(data->curr_seek_power) < 400 && labs(data->last_position - *data->position) < 4) {
    		data->curr_seek_power += 5;
    		if (data->debug && *data->debug)
    			fprintf(data->logfile, "%s output power: %ld\n", data->conveyor_name, data->curr_seek_power);
    	}
    	data->last_position = *data->position;
    	if ( *data->stop_position > *data->position )
    		new_power =  data->curr_seek_power;
    	else
    		new_power = - data->curr_seek_power;
    	if (data->debug && *data->debug)
    		fprintf(data->logfile,"%s stopping, power: %ld\n", data->conveyor_name, new_power);
   		if (data->debug && *data->debug) {
        	setIntValue(statistics_scope, "Vel", data->speed);
        	setIntValue(statistics_scope, "Pwr", new_power);
    	}
    	return new_power;
	}
}

static void display(struct PIDData *data, void* scope, uint64_t delta_t, char *current) {
	if (data->debug && *data->debug )
		fprintf(data->logfile,"%ld\t %s test: %s %ld, stop: %ld, spd: %ld, pow: %5.3f, pos: %ld\n",

				(long)delta_t, data->conveyor_name,
				(current)? current : "null",
				data->filtered_set_point,
				*data->stop_position,
				data->speed,
				data->current_power,
				*data->position);
}

static void display2(struct PIDData *data, double Ep, double dt, double set_point, long next_position) {
	if (data->debug && *data->debug && (data->speed != 0 || set_point != 0.0) )
		fprintf (data->logfile,"%s pos: %ld, Ep: %5.3f, tot_e %5.3f, dt: %5.3f, "
				"pwr: %5.3f, spd: %ld, setpt: %5.3f, next: %ld\n",
				data->conveyor_name,
				*data->position, Ep, data->total_err, dt,
				data->current_power,
				data->speed,
				set_point, next_position);

}
#endif

#if 0
	    data->sub_state = is_prestart;
	    data->start_position = *data->position;
        if (data->debug && *data->debug) 
		    fprintf(data->logfile,"%s detected change of set point %ld vs %ld - starting up\n",
		     data->conveyor_name, data->saved_set_point, *data->set_point);
#else
#endif


#if 0	
            /* old version of the acceleration test */
			if (fabs(set_point - data->ramp.target) < 0.05 * fabs(set_point)) {
				if ( data->state == cs_ramp ) data->state = cs_speed;
				else if (data->state == cs_position ) data->sub_state = is_speed;
			}
#endif
#if 0
static double double_range_limited(double val, double min, double max) {
    if (val < min) return min;
    if (val > max) return max;
    return val;
}
#endif


#if 0
static int has_stopped(struct PIDData *data) {
	if (data->debug && *data->debug) fprintf(data->logfile,"checkng for stop %ld %d\n", data->speed, data->speedcount);
	if ( labs(data->speed) <2 && data->speedcount++ >4) return 1;
	return 0;
}
#endif
