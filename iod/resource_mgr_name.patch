diff --git a/iod/src/ClientInterface.cpp b/iod/src/ClientInterface.cpp
index eb312ca..6090d65 100644
--- a/iod/src/ClientInterface.cpp
+++ b/iod/src/ClientInterface.cpp
@@ -166,6 +166,7 @@ public:
 
 struct CommandThreadInternals : public ClientInterfaceInternals {
 public:
+	std::string socket_name;
     zmq::socket_t socket;
     //pthread_t monitor_thread;
 	CommandTable<IODCommandFactory*> commands;
@@ -176,6 +177,9 @@ public:
 
 
     CommandThreadInternals() : socket(*MessagingInterface::getContext(), ZMQ_REP) {
+			char buf[20];
+			snprintf(buf, 20, "inproc://s_%lld", microsecs());
+			socket_name = buf;
 		commands.add("CHANNEL", new IODCommandChannelFactory());
 		commands.add("CHANNEL", new IODCommandChannelRefreshFactory());
 		commands.add("CHANNEL", new IODCommandChannelsFactory());
@@ -221,6 +225,12 @@ void IODCommandThread::registerCommand(std::string name, IODCommandFactory *cmd)
 	cti->commands.add(name.c_str(), cmd);
 }
 
+const std::string &IODCommandThread::socketName() const {
+	CommandThreadInternals *cti
+		= dynamic_cast<CommandThreadInternals*>(IODCommandThread::instance()->internals);
+	return cti->socket_name;
+}
+
 
 class MyMonitor : public zmq::monitor_t {
 public:
@@ -491,7 +501,7 @@ void IODCommandThread::operator()() {
 	NB_MSG << "Client Interface available on port: " << port << "\n";
 
     zmq::socket_t access_req(*MessagingInterface::getContext(), ZMQ_PAIR);
-    access_req.bind("inproc://resource_mgr");
+    access_req.bind(socketName().c_str()); //"inproc://resource_mgr"
 
 	zmq::socket_t command_sync(*MessagingInterface::getContext(), ZMQ_PAIR);
 	command_sync.bind("inproc://command_sync");
diff --git a/iod/src/ClientInterface.h b/iod/src/ClientInterface.h
index 207fdeb..0f171f7 100644
--- a/iod/src/ClientInterface.h
+++ b/iod/src/ClientInterface.h
@@ -45,12 +45,8 @@ public:
     void stop();
     bool done;
 	static void registerCommand(std::string name, IODCommandFactory *cmd);
-/*
-	void newPendingCommand(IODCommand *cmd);
-	IODCommand *getCommand();
-	void putCompletedCommand(IODCommand *cmd);
-	IODCommand *getCompletedCommand();
-*/
+	const std::string &socketName() const;
+
 protected:
 	ClientInterfaceInternals *internals;
 	friend IODCommand *parseCommandString(const char *data);
diff --git a/iod/src/ProcessingThread.cpp b/iod/src/ProcessingThread.cpp
index 7a590c9..9ef68e7 100644
--- a/iod/src/ProcessingThread.cpp
+++ b/iod/src/ProcessingThread.cpp
@@ -162,22 +162,6 @@ bool ProcessingThread::checkAndUpdateCycleDelay()
 	return false;
 }
 
-/*
-void ProcessingThread::waitForCommandProcessing(zmq::socket_t &resource_mgr)
-{
-	// handshake to give the command handler access to shared resources for a while
-	// if it has requested it.
-	// first stage is to give access second stage is to assert we are taking access back
-
-	safeSend(resource_mgr,"go", 2);
-	status = e_waiting;
-	char buf[10];
-	size_t len = 0;
-	safeRecv(resource_mgr, buf, 10, true, len);
-	safeSend(resource_mgr,"bye", 3);
-}
-*/
-
 static uint8_t *incoming_process_data = 0;
 static uint8_t *incoming_process_mask = 0;
 static uint32_t incoming_data_size;
@@ -429,7 +413,7 @@ void ProcessingThread::operator()()
 
 	// used to permit command processing
 	zmq::socket_t resource_mgr(*MessagingInterface::getContext(), ZMQ_PAIR);
-	resource_mgr.connect("inproc://resource_mgr");
+	resource_mgr.connect(command_interface.socketName().c_str());
 
 	zmq::socket_t ecat_sync(*MessagingInterface::getContext(), ZMQ_REQ);
 	ecat_sync.connect("inproc://ethercat_sync");
