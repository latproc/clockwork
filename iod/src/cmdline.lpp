%{
#include <stdlib.h>
#include "cmdline.h"
#include "cmdline.tab.hpp"
#ifdef USE_READLINE
#include <readline/readline.h>
#include <readline/history.h>
#endif

void yyerror(const char *);
static char *buf;
static int buflen = 0;
static char *bufp;
extern YYSTYPE yylval;
int yycharno;

extern bool cmdline_done;

void append_char(int ch);

%}
%x STRING
%x COMMENT

%%

[A-Za-z][A-Za-z0-9_.:]*       {
    yylval.sVal = strdup(yytext);
    return SYMBOL;
}

"0x"[0-9a-fA-F][0-9a-fA-F]* {
	long val;
	char *p;
	val = strtol(yytext, &p, 16);
	yylval.iVal = val;
	return INTEGER;
}

0\.0 {
	yylval.fVal = atof(yytext);
	return FLOAT;
}

0\. {
	yylval.fVal = atof(yytext);
	return FLOAT;
}

[-]{0,1}[0-9][0-9]*[.][0-9]* {
	yylval.fVal = atof(yytext);
	//std::cout << "FLOAT: " << yytext << ": " << yylval.fVal << "\n";
	return FLOAT;
}

[-]{0,1}[0-9][0-9]*[.][0-9]*E[0-9]{1,3} {
	yylval.fVal = atof(yytext);
	//std::cout << "FLOAT: " << yytext << ": " << yylval.fVal << "\n";
	return FLOAT;
}

0           {
    yylval.iVal = atoi(yytext);
    return INTEGER;
}

[-]{0,1}[1-9][0-9]* {
    yylval.iVal = atoi(yytext);
    return INTEGER;
}

\"			    {  /*"*/	
                    BEGIN STRING; 
					if (!buf) 
					{ 
					     buf = (char *)malloc(20); 
					     buflen = 20; 
					}
					bufp = buf;
					*bufp = 0;
 				}
<STRING>\\n		{ append_char('\n'); }
<STRING>\\r		{ append_char('\r'); }
<STRING>\\t		{ append_char('\t'); }
<STRING>\\[0-3][0-7][0-7] { unsigned char ch = ((yytext[1]-'0')*8 + yytext[2]-'0')*8+yytext[3]-'0'; append_char(ch); }
<STRING>\\\"	{ /*"*/ append_char('\"'); }
<STRING>\"		{ /*"*/ BEGIN 0; yylval.sVal = buf; buf = NULL; return STRINGVAL; }
<STRING>\n		{ append_char('\n'); yylineno++; yycharno=1; }
<STRING>.		{ append_char(*yytext); }

[ \t]+        ;       /* ignore whitespace */

\'              /*' ignore single quotes */

['-()=+*/;{}.%] {
    return *yytext;
}

.               { printf("found char %d (%c)\n", *yytext, *yytext); yyerror("Unknown character"); } 

%%

int yywrap(void) {
    return 1;
}

void append_char(int ch)
{
	if (bufp - buf == buflen-1) {
		buf = (char *)realloc(buf, buflen + 20);
		bufp = buf + buflen-1;
		buflen += 20;
	}
	*bufp++ = ch;
	*bufp = 0;
}

int get_input(char *buf, int size)
{
    char *line;
    static char *last_read = (char *)NULL;
    if (feof(yyin)) { return YY_NULL; }
    line = readline("> ");
    if (!line) {
		cmdline_done = true;
    	return YY_NULL;
	}
    if (strlen(line) + 2 > (unsigned int)size) {
        yyerror("input line too long");
        return YY_NULL;
    }
    strcpy(buf, line);
    free(line);
    
    if (strlen(buf)) {
        if (last_read && strcmp(buf, last_read) != 0) {
            free(last_read);
            last_read = 0;
        }
        if (!last_read) {
            add_history (buf);
            last_read = strdup(buf);
        }
    }
    return strlen(buf);
}

