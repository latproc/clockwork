diff --git a/iod/src/Action.cpp b/iod/src/Action.cpp
index 24eb0da..d9e897f 100644
--- a/iod/src/Action.cpp
+++ b/iod/src/Action.cpp
@@ -135,7 +135,7 @@ void Action::setBlocker(Action *a) { blocked = a; }
 void Action::setTrigger(Trigger *t) { 
 	if (!trigger && !t) return;
 	if (trigger && trigger == t) {
-//		DBG_ACTIONS << "Attempt to set trigger " << t->getName() << " when it is already set";
+		DBG_ACTIONS << "Attempt to set trigger " << t->getName() << " when it is already set";
 		return; 
 	}
 	cleanupTrigger();
diff --git a/iod/src/FireTriggerAction.cpp b/iod/src/FireTriggerAction.cpp
index e52acd9..2045673 100644
--- a/iod/src/FireTriggerAction.cpp
+++ b/iod/src/FireTriggerAction.cpp
@@ -28,7 +28,7 @@ static int max_count = 0;
 static int last_max = 0;
 
 FireTriggerAction::FireTriggerAction(MachineInstance *m, Trigger *t) 
-: Action(m), trigger(t->retain()){
+: Action(m),  pending_trigger(t->retain()) {
 	if (m) t->setOwner(m);
 	t->addHolder(this);
 	++count_instances;
@@ -48,6 +48,8 @@ FireTriggerAction::~FireTriggerAction() {
 
 Action::Status FireTriggerAction::run() { 
 	owner->start(this);
+	Action::setTrigger(pending_trigger->retain());
+	pending_trigger = pending_trigger->release();
 	if (trigger->enabled()) {
 		DBG_M_ACTIONS << owner->getName() << " triggered " << trigger->getName() << "\n";
 		trigger->fire(); 
diff --git a/iod/src/FireTriggerAction.h b/iod/src/FireTriggerAction.h
index 32c6ec8..722bd75 100644
--- a/iod/src/FireTriggerAction.h
+++ b/iod/src/FireTriggerAction.h
@@ -33,7 +33,7 @@ struct FireTriggerAction : public Action {
 	Status checkComplete();
     virtual std::ostream &operator<<(std::ostream &out)const;
 
-	Trigger *trigger;
+	Trigger *pending_trigger; // the trigger is held here and loaded into the action on run()
 };
 
 #endif
diff --git a/iod/src/MachineInstance.cpp b/iod/src/MachineInstance.cpp
index a82ab0c..111a3ce 100644
--- a/iod/src/MachineInstance.cpp
+++ b/iod/src/MachineInstance.cpp
@@ -3388,7 +3388,6 @@ bool MachineInstance::setStableState() {
 						else {
 							DBG_AUTOSTATES << " started state change on " << _name << " to " << s.state_name<<"\n";
 						}
-						free(sn);
 						//if (action_status == Action::Complete || action_status == Action::Failed) {
 						state_change->release();
 						state_change = 0;
@@ -3396,6 +3395,7 @@ bool MachineInstance::setStableState() {
 						SetStateActionTemplate ssat(CStringHolder("SELF"), s.state_name );
 						enqueueAction(ssat.factory(this)); // execute this state change next time actions are processed
 #endif
+						free(sn);
 					}
 					else {
 						DBG_AUTOSTATES << " already there\n";
