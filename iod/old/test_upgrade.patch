diff --git a/iod/src/MachineInstance.cpp b/iod/src/MachineInstance.cpp
index 4705e0c..06752ff 100644
--- a/iod/src/MachineInstance.cpp
+++ b/iod/src/MachineInstance.cpp
@@ -93,6 +93,8 @@ std::ostream &Parameter::operator<< (std::ostream &out)const {
 }
 Parameter::Parameter(const Parameter &orig) {
 	val = orig.val; machine = orig.machine; properties = orig.properties;
+	real_name = orig.real_name;
+
 }
 
 Transition::Transition(State s, State d, Message t, Predicate *p) : source(s), dest(d), trigger(t), condition(0) {
@@ -537,6 +539,8 @@ MachineInstance *MachineInstance::lookup(Value &val) {
 }
 
 bool MachineInstance::uses(MachineInstance *other) {
+	if (dependsOn(other)) return true;
+	if (other->dependsOn(this)) return false;
 	if (_type == other->_type) return other->_name < _name;
 	if (other->_type == "MODULE") return true;
 	if (_type == "MODULE") return false;
@@ -547,16 +551,14 @@ bool MachineInstance::uses(MachineInstance *other) {
 	if (other->_type == "COUNTERRATE") return true;
 	if (other->_type == "ANALOGOUTPUT") return true;
 	if (other->_type == "STATUS_FLAG") return true;
+	if (other->_type == "FLAG") return true;
 	if (_type == "POINT") return false;
 	if (_type == "ANALOGINPUT") return true;
 	if (other->_type == "COUNTER") return true;
 	if (_type == "COUNTERRATE") return true;
 	if (_type == "ANALOGOUTPUT") return true;
 	if (_type == "STATUS_FLAG") return true;
-	if (other->_type == "FLAG") return true;
 	if (_type == "FLAG") return false;
-	if (dependsOn(other)) return true;
-	if (other->dependsOn(this)) return false;
 	return other->_name < _name;
 }
 
@@ -3105,6 +3107,36 @@ void MachineInstance::setInitialState(bool resume) {
 void MachineInstance::publish() { 
 	++published; 
 }
+
+void sortDependentMachines(MachineInstance *m, std::list<MachineInstance*> &sorted) {
+	// enable related machines first (locals and (iff this is a list) parameters
+	std::set<MachineInstance *>related_machines;
+	for (unsigned int i = 0; i<m->locals.size(); ++i) {
+		if (m->locals[i].machine) related_machines.insert(m->locals[i].machine);
+	}
+	if (m->_type == "LIST") {
+		for (unsigned int i = 0; i<m->parameters.size(); ++i) {
+			if (m->parameters[i].machine) related_machines.insert(m->parameters[i].machine);
+		}
+	}
+	if (!related_machines.empty()) {
+		std::set<MachineInstance *>::iterator iter = related_machines.begin();
+		while (iter!= related_machines.end()) {
+			MachineInstance *a = *iter;
+			std::list<MachineInstance*>::iterator oi = sorted.begin();
+			while (oi != sorted.end()) {
+				MachineInstance *b = *oi;
+				//DBG_MSG << "CHECKING if " << a->getName() << " uses " << b->getName() << "\n";
+				if (!a->uses(b)) break;
+				oi++;
+			}
+			if (oi == sorted.end()) sorted.push_back(a);
+			else sorted.insert(oi, a);
+			iter++;
+		}
+	}
+}
+		
 void MachineInstance::unpublish() { --published; }
 
 void MachineInstance::enable() {
@@ -3116,64 +3148,25 @@ void MachineInstance::enable() {
 		io_interface->setupProperties(this);
 		io_interface->handleChange(pending_events);
 	}
-	for (unsigned int i = 0; i<locals.size(); ++i) {
-		if (!locals[i].machine) {
-			std::stringstream ss;
-			ss << "No machine found for " << locals[i].val << " in " << _name;
-			char *msg = strdup(ss.str().c_str());
-			MessageLog::instance()->add(msg);
-			NB_MSG << msg << "\n";
-			free(msg);
+	std::list<MachineInstance*>sorted;
+	sortDependentMachines(this, sorted);
+	std::list<MachineInstance*>::iterator oi = sorted.begin();
+	while (oi != sorted.end()) {
+		MachineInstance *b = *oi++;
+		if (!b->enabled()) {
+			//DBG_MSG << "ENABLING: " << b->_name << "\n";
+			b->enable();
 		}
-		else
-			locals[i].machine->enable();
+	}
+
 #if 1
-		{
-			std::string msgstr(_name);
-			msgstr += "_enabled";
-			Message *msg = new Message(msgstr.c_str());
-			sendMessageToReceiver(msg, this, false);
-		}
-#endif
+	if (isActive()) {
+		std::string msgstr(_name);
+		msgstr += "_enabled";
+		Message *msg = new Message(msgstr.c_str());
+		sendMessageToReceiver(msg, this, false);
 	}
-	if (_type == "LIST") {
-		// enabling a list enables the members after sorting them into dependency order
-		std::vector<MachineInstance*> tmp(parameters.size());
-		unsigned int i = 0, j = 0;
-		while (i<parameters.size()) {
-			// parameters my be just values but if they are machines they need to be enabled
-			if (parameters[i].machine) {
-				tmp[j++] = parameters[i].machine;
-			}
-			++i;
-		}
-#ifdef VERBOSE_DEBUG
-		std::stringstream ss;
-		ss << "Sorting for enable: ";
-		const char *delim = "";
-		i = 0;
-		while (i<j) {
-			// parameters my be just values but if they are machines they need to be enabled
-			ss << delim << tmp[i]->getName(); delim = ",";
-			++i;
-		}
-		DBG_MSG << ss.str() << "\n";
-		ss.str("");
-		ss.clear();
-		ss << "Enabling sorted: ";
-		delim = "";
-		std::sort(tmp.begin(), tmp.begin()+j, machine_dependencies);
-		for (unsigned int i = 0; i<j; ++i) {
-			ss << delim << tmp[i]->getName(); delim = ",";
-		}
-		DBG_MSG << ss.str() << "\n";
-#else
-		std::sort(tmp.begin(), tmp.begin()+j, machine_dependencies);
 #endif
-		for (unsigned int i = 0; i<j; ++i) {
-			tmp[i]->enable();
-		}
-	}
 
 	setInitialState(true);
 	setNeedsCheck();
@@ -3226,47 +3219,16 @@ void MachineInstance::disable() {
 	}
 
 	gettimeofday(&disabled_time, 0);
-	if (_type == "LIST") {
-		// enabling a list enables the members after sorting them into dependency order
-		std::vector<MachineInstance*> tmp(parameters.size());
-		unsigned int i = 0, j = 0;
-		while (i<parameters.size()) {
-			// parameters my be just values but if they are machines they need to be enabled
-			if (parameters[i].machine) {
-				tmp[j++] = parameters[i].machine;
-			}
-			++i;
-		}
-#ifdef VERBOSE_DEBUG
-		std::stringstream ss;
-		ss << "Sorting for disable: ";
-		const char *delim = "";
-		i = 0;
-		while (i<j) {
-			// parameters my be just values but if they are machines they need to be enabled
-			ss << delim << tmp[i]->getName(); delim = ",";
-			++i;
-		}
-		DBG_MSG << ss.str() << "\n";
-		ss.str("");
-		ss.clear();
-		ss << "Disabling sorted: ";
-		delim = "";
-		std::sort(tmp.begin(), tmp.begin()+j, reverse_machine_dependencies);
-		for (unsigned int i = 0; i<j; ++i) {
-			ss << delim << tmp[i]->getName(); delim = ",";
-		}
-		DBG_MSG << ss.str() << "\n";
-#else
-		std::sort(tmp.begin(), tmp.begin()+j, reverse_machine_dependencies);
-#endif
-		for (unsigned int i = 0; i<j; ++i) {
-			tmp[i]->disable();
+	std::list<MachineInstance*>sorted;
+	sortDependentMachines(this, sorted);
+	std::list<MachineInstance*>::reverse_iterator oi = sorted.rbegin();
+	while (oi != sorted.rend()) {
+		MachineInstance *b = *oi++;
+		if (b->enabled()) {
+			//DBG_MSG << "DISABLING: " << b->_name << "\n";
+			b->disable();
 		}
 	}
-	for (unsigned int i = 0; i<locals.size(); ++i) {
-		if (locals[i].machine) locals[i].machine->disable();
-	}
 	// if any dependent machines are already enabled, make sure they know we are disabled
 	std::set<MachineInstance *>::iterator d_iter = depends.begin();
 	while (d_iter != depends.end()) {
diff --git a/iod/src/clockwork.cpp b/iod/src/clockwork.cpp
index 1e03d55..7f46135 100644
--- a/iod/src/clockwork.cpp
+++ b/iod/src/clockwork.cpp
@@ -987,9 +987,9 @@ void initialise_machines() {
 				std::string name(m->fullName());
 				//if (m->owner) name += m->owner->getName() + ".";
 				//name += m->getName();
-				if (!m->isShadow())
-					m->enable();
-                std::map<std::string, std::map<std::string, Value> >::iterator found = store.init_values.find(name);
+				//if (!m->isShadow())
+				//	m->enable();
+				std::map<std::string, std::map<std::string, Value> >::iterator found = store.init_values.find(name);
                 if (found != store.init_values.end()) {
 					std::map< std::string, Value > &list((*found).second);
                     PersistentStore::PropertyPair node;
@@ -1006,6 +1006,7 @@ void initialise_machines() {
 		}
 	}
     else { // enable 'contant' machines and marked as persistent
+#if 0
 		m_iter = MachineInstance::begin();
         while (m_iter != MachineInstance::end()) {
 			MachineInstance *m = *m_iter++;
@@ -1013,6 +1014,7 @@ void initialise_machines() {
 				m->enable();
             }
         }
+#endif
     }
     
     // prepare the list of machines that will be processed at idle time
