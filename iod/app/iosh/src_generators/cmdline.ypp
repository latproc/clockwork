%{

#include <stdio.h>
#include <string.h>
#include <iostream>
#include <iomanip>
#include <string>
#ifdef USE_READLINE
#include <readline/readline.h>
#include <readline/history.h>
#endif

#include "cmdline.h"

int yylex(void);

extern int yylineno;
extern int yycharno;
extern char *yytext;

%}

%union {
	int iVal;
	double fVal;
	const char *sVal;
	const char *symbol;
    const char *pVal;
	Value *val;
};

%token <iVal> INTEGER
%token <fVal> FLOAT
%token <symbol> SYMBOL
%token <sVal> STRINGVAL

%%

session:
| commandline 
| session commandline 
;

commandline: 
command  ';' { process_command(params); params.clear();}
| ';' 
;

command:
SYMBOL { 
	params.push_back($1); 
}
| command param
;

param:
INTEGER		{ params.push_back(yylval.iVal); }
| FLOAT		{ params.push_back(yylval.fVal); }
| SYMBOL	{ params.push_back(yylval.sVal); }
| STRINGVAL	{ params.push_back(Value(yylval.sVal, Value::t_string)); }

%%

void yyerror(const char *str)
{
    std::cerr << str << "\n";
}


